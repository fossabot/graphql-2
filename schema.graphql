schema {
  query: Query
}

"""
The query type, represents all of the entry points into our object graph.
"""
type Query {
  "Returns an array of inprogress posts."
  drafts(limit: Int, offset: Int): [Post]! @hasRole(role: admin)

  "Returns an array of all posts, ordered by reverse chronological order, using provided limit and offset."
  posts(limit: Int, offset: Int): [Post]!

  "Returns a single post by ID."
  post(id: ID!): Post

  "Returns post id for the next post chronologically."
  nextPost(id: ID!): Post

  "Returns post id for the previous post chronologically."
  prevPost(id: ID!): Post

  "Returns a subset of all links ever, in reverse chronological order, using provided limit and offset."
  links(limit: Int, offset: Int): [Link]!

  "Returns a single link by id or url."
  link(id: ID, url: URI): Link

  "Returns a number of stats, ordered by most recently updated."
  stats(count: Int): [Stat]!

  "Returns all posts that contain a tag."
  postsByTag(id: String!): [Post]!

  "Returns counts of entries in the database."
  counts: [Stat]!

  "If logged in, returns a user."
  whoami: User

  "Returns tweets in database."
  tweets(limit: Int, offset: Int): [Tweet]!

  "Returns just one tweet."
  tweet(id: ID!): Tweet

  "Returns a user's tweets by screen name."
  tweetsByScreenName(screen_name: String!, limit: Int, offset: Int): [Tweet]!

  homeTimelineURLs(limit: Int): [TwitterURL]!

  "Returns all tags used in a post."
  tags: [String!]!

  "Returns all Logs for a user. If no user specified, returns your logs."
  logs(user_id: String): [Log]! @loggedIn
}

type Mutation {
  createPost(input: NewPost!): Post! @hasRole(role: admin)
  editPost(Id: ID!, input: EditedPost!): Post! @hasRole(role: admin)
  insertLog(input: NewLog!): Log @loggedIn
  upsertBook(input: EditBook!): Book! @hasRole(role: admin)
  upsertLink(input: NewLink!): Link! @hasRole(role: admin)
  upsertStat(input: NewStat!): Stat! @hasRole(role: admin)
  upsertTweet(input: NewTweet!): Tweet! @hasRole(role: admin)
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

directive @loggedIn on FIELD_DEFINITION

enum Role {
  admin
  normal
}
