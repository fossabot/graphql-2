schema {
  query: Query
}

"""
The query type, represents all of the entry points into our object graph.
"""
type Query {
  "Returns an array of inprogress posts."
  drafts(limit: Int, offset: Int): [Post]! @hasRole(role: admin)

  "Returns an array of all posts, ordered by reverse chronological order, using provided limit and offset."
  posts(limit: Int, offset: Int): [Post]!

  "Returns a single post by ID."
  post(id: ID!): Post

  "Returns post id for the next post chronologically."
  nextPost(id: ID!): Post

  "Returns post id for the previous post chronologically."
  prevPost(id: ID!): Post

  "Returns a subset of all links ever, in reverse chronological order, using provided limit and offset."
  links(limit: Int, offset: Int): [Link]!

  "Returns a single link by id."
  link(id: ID!): Link

  "Returns a number of stats, ordered by most recently updated."
  stats(count: Int): [Stat]!

  "Returns all posts that contain a tag."
  postsByTag(id: String!): [Post]!

  "Returns counts of entries in the database."
  counts: [Stat]!

  "If logged in, returns a user."
  whoami: User
}

"""
A post is an individual post in the blog.
"""
type Post {
  id: ID!
  title: String!
  content: String!
  summary: String!
  readtime: Int!

  "datetime is the published time of an article."
  datetime: Time!
  created: Time!
  modified: Time!
  draft: Boolean!
  tags: [String!]!

  "links are the links referenced in a post."
  links: [Link]!
}

"""
A link is a link I have save on pinboard or a link in a post.
"""
type Link {
  id: ID!
  title: String!
  uri: URI!
  created: Time!
  description: String!
  screenshot: URI!
  tags: [String!]!
	modified: Time!
}

"""
A stat is a key value pair of two interesting strings.
"""
type Stat {
  key: String!
  value: String!
}


"""
A user is a logged in user.
"""
type User {
	id: ID!
	role: String!
	apikey: String!
	created: Time!
	modified: Time!
}

"""
A Tweet is an archived tweet.
"""
type Tweet {
  id: ID!
  text: String!
  hashtags: [String!]!
  symbols: [String!]!
  user_mentions: [String!]!
  urls: [URI!]!
  user: String!
  favorite_count: Int!
  retweet_count: Int!
  posted: Time!
}

"""
Time is a datetime scalar with timezone.
"""
scalar Time

"""
A URI is a url or url like thing.
"""
scalar URI

"""
Comment is an undefined type reserved for the future.
"""
type Comment {
  id: ID!
}

input NewPost {
  content: String!
  title: String!
  datetime: Time!
  draft: Boolean!
}

input EditedPost {
  content: String!
  title: String!
  datetime: Time!
  draft: Boolean!
}

input NewLink {
  title: String!
  uri: URI!
  description: String!
  tags: [String!]!
  created: Time
}

input NewStat {
  key: String!
  value: String!
}

input NewTweet {
  favorite_count: Int
  hashtags: [String!]
  id: ID!
  posted: Time!
  retweet_count: Int
  symbols: [String!]
  text: String!
  urls: [URI!]
  user: String!
  user_mentions: [String!]
}

type Mutation {
  createPost(input: NewPost!): Post! @hasRole(role: admin)
  editPost(Id: ID!, input: EditedPost!): Post! @hasRole(role: admin)
  upsertLink(input: NewLink!): Link! @hasRole(role: admin)
  upsertStat(input: NewStat!): Stat! @hasRole(role: admin)
  upsertTweet(input: NewTweet!): Tweet! @hasRole(role: admin)
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  admin
  normal
}
